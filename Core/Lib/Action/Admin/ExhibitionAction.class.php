<?phpclass ExhibitionAction extends AdminAction{	public function _initialize() {		parent::_initialize();	//RBAC 验证接口初始化	}		public function index(){		}		public function thumbnail(){		// This script accepts an ID and looks in the user's session for stored thumbnail data.		// It then streams the data to the browser as an image				// Work around the Flash Player Cookie Bug		if (isset($_POST["PHPSESSID"])) {			session_id($_POST["PHPSESSID"]);		}				session_start();				$image_id = isset($_GET["id"]) ? $_GET["id"] : false;		if ($image_id === false) {			header("HTTP/1.1 500 Internal Server Error");			echo "No ID";			exit(0);		}		if (!is_array($_SESSION["file_info"]) || !isset($_SESSION["file_info"][$image_id])) {			header("HTTP/1.1 404 Not found");			exit(0);		}		header("Content-type: image/jpeg") ;		header("Content-Length: ".strlen($_SESSION["file_info"][$image_id]));		exit(0);	}				public function uploadLogo(){				if (isset($_POST["PHPSESSID"])) {			session_id($_POST["PHPSESSID"]);		}		session_start();		ini_set("html_errors", "0");		// Check the upload		if (!isset($_FILES["Filedata"]) || !is_uploaded_file($_FILES["Filedata"]["tmp_name"]) || $_FILES["Filedata"]["error"] != 0) {			echo "ERROR:invalid upload";			exit(0);		}		// Get the image and create a thumbnail		$img = imagecreatefromjpeg($_FILES["Filedata"]["tmp_name"]);		if (!$img) {			echo "ERROR:could not create image handle ". $_FILES["Filedata"]["tmp_name"];			exit(0);		}		$width = imageSX($img);		$height = imageSY($img);		if (!$width || !$height) {			echo "ERROR:Invalid width or height";			exit(0);		}		// Build the thumbnail		$target_width = 100;		$target_height = 100;		$target_ratio = $target_width / $target_height;		$img_ratio = $width / $height;		if ($target_ratio > $img_ratio) {			$new_height = $target_height;			$new_width = $img_ratio * $target_height;		} else {			$new_height = $target_width / $img_ratio;			$new_width = $target_width;		}		if ($new_height > $target_height) {			$new_height = $target_height;		}		if ($new_width > $target_width) {			$new_height = $target_width;		}		$new_img = ImageCreateTrueColor(100, 100);		if (!@imagefilledrectangle($new_img, 0, 0, $target_width-1, $target_height-1, 0)) {	// Fill the image black			echo "ERROR:Could not fill new image";			exit(0);		}		if (!@imagecopyresampled($new_img, $img, ($target_width-$new_width)/2, ($target_height-$new_height)/2, 0, 0, $new_width, $new_height, $width, $height)) {			echo "ERROR:Could not resize image";			exit(0);		}		if (!isset($_SESSION["file_info"])) {			$_SESSION["file_info"] = array();		}		// Use a output buffering to load the image into a variable		ob_start();		imagejpeg($new_img);		$imagevariable = ob_get_contents();		ob_end_clean();		$file_id = md5($_FILES["Filedata"]["tmp_name"] + rand()*100000);				$_SESSION["file_info"][$file_id] = $imagevariable;		echo "FILEID:" . $file_id;	// Return the file id to the script	}		public function add(){		if(isset($_POST['dosubmit'])) {			$this->display('attachment');		}else{			$privince=$province=D('areas')->where(array('parent_id'=>1))->select();			$this->assign('province',$province);			$ExhibitionTypeDB = D('Exhibitiontype')->getAllType(array('status'=>1),'sort DESC');            $this->assign('type',$ExhibitionTypeDB);			$this->display();		}	}			public function getArea(){        $where['parent_id']=$_REQUEST['areaId'];        $area=D('areas')->where($where)->select();        $this->ajaxReturn($area);    }	//展览类型列表	public function type(){		import('ORG.Util.Page');//导入分页类		$map=array();		$ExhibitionTypeDB = D('Exhibitiontype');		$count=$ExhibitionTypeDB->where($map)->count();		$Page=new Page($count); //实例化分页类，传入总数		// 进行分页数据查询 注意page方法的参数的前面部分是当前的页数使用 $_GET[p]获取        $nowPage = isset($_GET['p'])?$_GET['p']:1;        $show       = $Page->show();// 分页显示输出		$list = $ExhibitionTypeDB->where($map)->order('id ASC')->page($nowPage.','.C('web_admin_pagenum'))->select();				//dump($count); //for debug				$this->assign('list',$list);		$this->assign('page',$show);		//$this->assign('type',$show);		$this->display();	}		//增加展览类型	public function type_add(){		$ExhibitionTypeDB=D('Exhibitiontype');		if(isset($_POST['dosubmit'])){			if($ExhibitionTypeDB->create()){				if($ExhibitionTypeDB->add()){					$this->assign("jumpUrl",U('/Admin/Exhibition/type'));					$this->success('添加成功！');				}else{					$this->error('添加失败!');				}			}else{				$this->error();			}		}else{            $this->display();		}	}		//编辑展览类型	public function type_edit(){		$ExhibitionTypeDB = D('Exhibitiontype');   //调用制定一直的模型层		if(isset($_POST['dosubmit'])) {            //根据表单提交的POST数据创建数据对象            if($ExhibitionTypeDB->create()){                if($ExhibitionTypeDB->save()){                    $this->assign("jumpUrl",U('/Admin/Exhibition/type'));                    $this->success('编辑成功！');                }else{                     $this->error('编辑失败!');                }            }else{                $this->error($ExhibitionTypeDB->getError());            }        }else{            $id = $this->_get('id','intval',0);            if(!$id)$this->error('参数错误!');            $info = $ExhibitionTypeDB->getType(array('id'=>$id));            $this->assign('info',$info);            $this->display();        }	}		//删除展览类型	public function type_del(){		$id = $this->_get('id','intval',0);        if(!$id)$this->error('参数错误!');        $ExhibitionTypeDB=D('Exhibitiontype');        if($ExhibitionTypeDB->delType('id='.$id)){            $this->assign("jumpUrl",U('/Admin/Exhibition/type'));            $this->success('删除成功！');        }else{            $this->error('删除失败!');        }	}		public function attachment(){		$this->display();	}}